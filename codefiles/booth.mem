00000100001000000000000000110000 // ADDI R1, R0, 48
00000100010000000000000000010111 // ADDI R2, R0, 13
00000100011000000000000000100000 // ADDI R3, R0, 32
10010100111000100000000000000000 // MOVE R7, R2
10100100111001110000000000000001 // ANDI R7, R7, 1
00100100111001110000000000000001 // SLAI R7, 1
00000000111001100011100000000011 // OR R7, R7, R6
00111000111000000000000000001011 // BZ R7, 11 -> 7 // 00 case
00010100111001110000000000000001 // SUBI R7, R7, 1 // 01 case
00111000111000000000000000000101 // BZ R7, 5 -> 9
00010100111001110000000000000001 // SUBI R7, R7, 1 // 10 case
00111000111000000000000000000101 // BZ R7, 5
00010100111001110000000000000001 // SUBI R7, R7, 1 // 11 case
00111000111000000000000000000101 // BZ R7, 5
00000000100000010010000000000000 // ADD R4, R4, R1
00001000000000000000000000000011 // BR 3
00000000100000010010000000000001 // SUB R4, R4, R1
00001000000000000000000000000001 // BR 1
10010100111001000000000000000000 // MOVE R7, R4
10100100111001110000000000000001 // ANDI R7, R7, 1
00000101000000000000000000011111 // ADDI R8, R0, 31
00100100111001110000000000000001 // SLAI R7, 1
00010101000010000000000000000001 // SUBI R8, R8, 1
00101001000000001111111111111110 // BPL R8, -2
10010100110000100000000000000000 // MOVE R6, R2
10100100110001100000000000000001 // ANDI R6, R6, 1
01000100010000100000000000000001 // SRLI R2, 1
00000000010001110001000000000011 // OR R2, R2, R7
00110100100001000000000000000001 // SRAI R4, 1
00010100011000110000000000000001 // SUBI R3, R3, 1
00101000011000001111111111100101 // BPL R3, -27
10010101111000100000000000000000 // MOVE R15, R2
10001000000000000000000000000000 // HALT

// Expected output: reg_arr[15] should be 48*23 = 1104